-- Create Order Table
CREATE TABLE IF NOT EXISTS orders (
    ORDER_ID SERIAL PRIMARY KEY,
    USER_ID BIGINT,
    ORDER_DATE DATE,
    TOTAL_AMOUNT NUMERIC,
    STATUS VARCHAR(50),
    ORDER_STATUS VARCHAR(50),
    SHIPPING_ADDRESS VARCHAR(255),
    PAYMENT_METHOD VARCHAR(50), -- Assuming PaymentMethod is a string
    DELIVERY_DATE DATE,
    CUSTOMER_NOTES TEXT,
    INVOICE_ID BIGINT,
    FOREIGN KEY (USER_ID) REFERENCES user(USER_ID)
);

CREATE TABLE order_item (
    ORDER_ITEM_ID BIGINT PRIMARY KEY,
    orderId BIGINT,
    productId BIGINT(50),
    quantity INT,
    FOREIGN KEY (orderId) REFERENCES OrderTable(orderId),
    FOREIGN KEY (productId) REFERENCES Product(productId)
);

-- Create Inventory Table
CREATE TABLE IF NOT EXISTS inventory (
    PRODUCT_ID BIGINT PRIMARY KEY,
    QUANTITY_AVAILABLE INT,
    LAST_UPDATED DATE,
    VENDOR VARCHAR(255),
    MIN_STOCK_THRESHOLD BIGINT,
    MAX_STOCK_THRESHOLD BIGINT,
    REORDER_QUANTITY INT,
    COST_PRICE NUMERIC,
    SUPPLIER_ID NUMERIC,
    FOREIGN KEY (PRODUCT_ID) REFERENCES products(PRODUCT_ID)
);

-- Create user_activity table
CREATE TABLE IF NOT EXISTS user_activity (
    ACTIVITY_ID BIGINT PRIMARY KEY,
    USER_ID BIGINT,
    TIMESTAMP TIMESTAMP,
    PRODUCT_ID BIGINT,
    ACTION_TYPE VARCHAR(50),
    DEVICE_TYPE VARCHAR(50),
    BROWSER VARCHAR(255),
    LOCATION VARCHAR(255),
    DURATION BIGINT,
    REFERRER BIGINT,
    FOREIGN KEY (USER_ID) REFERENCES user(USER_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES products(PRODUCT_ID)
);

-- Create payments
CREATE TABLE IF NOT EXISTS payments (
    PAYMENT_ID SERIAL PRIMARY KEY,
    ORDER_ID BIGINT,
    AMOUNT NUMERIC,
    PAYMENT_STATUS VARCHAR(50),
    TIMESTAMP TIMESTAMP,
    PAYMENT_GATEWAY VARCHAR(255),
    CARD_TYPE VARCHAR(50),
    CARD_LAST_DIGITS INT,
    BILLING_ADDRESS VARCHAR(255),
    TRANSACTION_ID VARCHAR(255),
    FOREIGN KEY (ORDER_ID) REFERENCES orders(ORDER_ID),
);

-- Create products
CREATE TABLE IF NOT EXISTS products (
    PRODUCT_ID SERIAL PRIMARY KEY,
    NAME VARCHAR(255),
    DESCRIPTION TEXT,
    PRICE NUMERIC,
    CATEGORY VARCHAR(255),
    BRAND VARCHAR(255),
    WEIGHT NUMERIC,
    DIMENSIONS VARCHAR(255),
    MANUFACTURER VARCHAR(255),
    AVAILABILITY BOOLEAN
);

-- Create cart_events
CREATE TABLE IF NOT EXISTS shopping_cart (
    CARD_ID SERIAL PRIMARY KEY,
    USER_ID BIGINT,
    PRODUCT_ID BIGINT,
    QUANTITY INT,
    TIMESTAMP TIMESTAMP,
    SESSION_ID BIGINT,
    WHISHLIST_ID BIGINT,
    COUPON_APPLIED VARCHAR(255),
    IS_ABANDONED BOOLEAN,
    IS_PURCHASED BOOLEAN,
    FOREIGN KEY (USER_ID) REFERENCES user(USER_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES products(PRODUCT_ID)
);

-- Create product_reviews
CREATE TABLE IF NOT EXISTS reviews (
    REVIEW_ID SERIAL PRIMARY KEY,
    PRODUCT_ID BIGINT,
    USER_ID BIGINT,
    RATING INT,
    COMMENT TEXT,
    TIMESTAMP TIMESTAMP,
    IS_VERIFIED BOOLEAN,
    IS_HELPFUL BOOLEAN,
    RESPONSE_ID BIGINT,
    REVIEWER_LOCATION VARCHAR(255),
    FOREIGN KEY (USER_ID) REFERENCES user(USER_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES products(PRODUCT_ID)
);

-- Create discounts
CREATE TABLE IF NOT EXISTS discounts (
    DISCOUNT_ID SERIAL PRIMARY KEY,
    PRODUCT_ID BIGINT,
    DISCOUNT_PERCENTAGE INT,
    START_DATE DATE,
    END_DATE DATE,
    COUPON_CODE VARCHAR(255),
    IS_ACTIVE BOOLEAN,
    USAGE_LIMIT INT,
    APPLICABLE_CATEGORY VARCHAR(255),
    APPLICABLE_USER_TYPE VARCHAR(255),
    FOREIGN KEY (PRODUCT_ID) REFERENCES products(PRODUCT_ID)
);

-- Create returns
CREATE TABLE IF NOT EXISTS returns (
    RETURN_ID SERIAL PRIMARY KEY,
    ORDER_ID BIGINT,
    USER_ID BIGINT,
    RETURN_REASON VARCHAR(255),
    TIMESTAMP TIMESTAMP,
    RETURN_QUANTITY INT,
    RETURN_NOTES TEXT,
    RETURN_ADDRESS VARCHAR(255),
    REFUND_AMOUNT NUMERIC,
    FOREIGN KEY (USER_ID) REFERENCES user(USER_ID)
);

-- Create support_interactions
CREATE TABLE IF NOT EXISTS support_interactions (
    INTERACTION_ID SERIAL PRIMARY KEY,
    USER_ID BIGINT,
    TIMESTAMP TIMESTAMP,
    ISSUE_TYPE VARCHAR(255),
    RESOLVED_STATUS VARCHAR(255),
    AGENT_ID VARCHAR(255),
    PRIORITY VARCHAR(255),
    DEPARTMENT VARCHAR(255),
    REPONSE_TIME VARCHAR(255),
    RESOLUTION_NOTES TEXT,
    FOREIGN KEY (USER_ID) REFERENCES user(USER_ID)
);






